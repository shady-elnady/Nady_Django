# -*- coding: utf-8 -*-
"""Django_React.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18_e8Pr2avZujmq-b6rx0myJpHJDnKNTu
"""

import numpy as np
import keras
import matplotlib.pyplot as plt
from keras.datasets import mnist
from tensorflow.keras.optimizers import Adam

(x_train, y_train), (x_test, y_test) = mnist.load_data()

print(x_train.shape)
print(x_test.shape)

print(y_train.shape)
print(y_test.shape)

plt.imshow(x_train[0], cmap='gray')

y_train[0]

x_train = np.expand_dims(x_train, axis= 3)
x_test = np.expand_dims(x_test, axis= 3)

print(x_train.shape)
print(x_test.shape)

from keras.utils.np_utils import to_categorical
y_train = to_categorical(y_train, 10)
y_test = to_categorical(y_test, 10)

y_train[0]

x_train, x_test = x_train/255, x_test/255

from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten
from keras.layers.convolutional import MaxPooling2D, Conv2D

def my_convnet_1():
  model = Sequential()
  model.add(Conv2D(32, (5, 5), input_shape=(28, 28, 1), activation='relu'))
  model.add(MaxPooling2D((2,2)))

  model.add(Conv2D(16, (3, 3), activation='relu'))
  model.add(MaxPooling2D((2,2)))

  model.add(Flatten())
  model.add(Dense(100, activation='relu'))

  model.add(Dropout(0.5))

  model.add(Dense(10, activation='softmax'))

  # model.compile(Adam(learning_rate=0.01), loss='categorical_crossentropy', metrics=['accuracy'])
  model.compile(optimizer= "adam", loss='categorical_crossentropy', metrics=["accuracy"])

  return model

model = my_convnet_1()

model.summary()

history = model.fit(x_train, y_train, epochs=8, validation_split=0.2, batch_size=256, verbose=1, shuffle=True)

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('loss')
plt.legend(['training', 'validation'])
plt.show()

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('accuracy')
plt.legend(['training', 'validation'])
plt.show()

score = model.evaluate(x_test, y_test, verbose=0)

print('error', score[0])
print('acuracy', score[1])

model.save('CNN_model.h5')

# from google.colab import files
#
# files.download('CNN_model.h5')